;; general
(setq inhibit-startup-message t)
(add-to-list 'load-path "~/.emacs.d/site-lisp/")
;;(add-to-list 'load-path "~/Dropbox/doc/config_file/_emacs_d/site-lisp/")

;;---fix flyspell not star---
(setenv "PATH" (concat (getenv "PATH") ":/usr/local/bin"))
(setq exec-path (append exec-path '("/usr/local/bin")))

;;----disable bell sound----
;(setq visible-bell t)

;;-- (setq ring-bell-function 'ignore)
(setq ring-bell-function 'ignore)

;; yanisppet bundle
;;(require 'yasnippet-bundle)

;;-------color theme-------
;;(load-file "/usr/share/emacs/site-lisp/emacs-goodies-el/color-theme-tango.el")
(require 'color-theme)
(color-theme-initialize)
;(setq color-theme-is-global t)
(color-theme-deep-blue)
;;(color-theme-euphoria)
;;(color-theme-matrix)
;(color-theme-tango)
;;(color-theme-infodoc)
;;(color-theme-calm-forest)
;;(color-theme-gray30)
;;;;--- zenburn theme ---
;;(add-to-list 'custom-theme-load-path "~/.emacs.d/site-lisp/themes/")
;;(load-theme 'zenburn t)

;;;;-----color theme - solarized -----
;; (add-to-list 'load-path "~/.emacs.d/site-lisp/color-theme-solarized/")
;; (require 'color-theme-solarized)
;; (color-theme-solarized)

;;-----font------
;(set-default-font "Courier 10 Pitch-14")
;(set-default-font "Monospace-16")
;(set-default-font "Menlo-16")
(set-default-font "Monaco-16")
;(set-default-font "DejaVu Sans Mono-;(set-default-font "Verdana-11")




;;-------shell mode set coding system--------
;;(setq ansi-color-for-comint-mode t)

;;--------display time---------
(setq display-time-format "%Y-%m-%d %A %H:%M:%S")
(setq display-time-interval 1)
(display-time-mode t)

;;-----line number-----------
(global-linum-mode 1)

;;----- M-> to switch windows---
;;(windmove-default-keybindings 'meta)
;;=====mac key define=====
;; set keys for Apple keyboard, for emacs in OS X
;;(setq mac-command-modifier 'meta) ; make cmd key do Meta
;;(setq mac-option-modifier 'super) ; make opt key do Super
;;(setq mac-control-modifier 'control) ; make Control key do Control
;;(setq ns-function-modifier 'hyper)  ; make Fn key do Hyper
;;===home key for mac====
;;(setq mac-option-modifier 'super )
;;(setq mac-command-modifier 'meta )
;; (setq mac-option-key-is-meta t
;;       mac-command-key-is-meta nil
;;       mac-command-modifier 'none
;;       mac-option-modifier 'meta)

(define-key global-map [home] 'beginning-of-line)
(define-key global-map [s-left] 'beginning-of-line)
(define-key global-map [end] 'end-of-line)
(define-key global-map [s-right] 'end-of-line)
(define-key global-map [M-up] 'backward-paragraph)
(define-key global-map [M-down] 'forward-paragraph)


;;======================cursor==================
;; Change cursor color according to mode; inspired by
;; http://www.emacswiki.org/emacs/ChangingCursorDynamically
(setq djcb-read-only-color       "gray")
;; valid values are t, nil, box, hollow, bar, (bar . WIDTH), hbar,
;; (hbar. HEIGHT); see the docs for set-cursor-type

(setq djcb-read-only-cursor-type 'hbar)
(setq djcb-overwrite-color       "red")
(setq djcb-overwrite-cursor-type 'box)
(setq djcb-normal-color          "red")
(setq djcb-normal-cursor-type    'bar)

(defun djcb-set-cursor-according-to-mode ()
  "change cursor color and type according to some minor modes."
  (cond
    (buffer-read-only
      (set-cursor-color djcb-read-only-color)
      (setq cursor-type djcb-read-only-cursor-type))
    (overwrite-mode
      (set-cursor-color djcb-overwrite-color)
      (setq cursor-type djcb-overwrite-cursor-type))
    (t 
      (set-cursor-color djcb-normal-color)
      (setq cursor-type djcb-normal-cursor-type))))

(add-hook 'post-command-hook 'djcb-set-cursor-according-to-mode)



;;====================== Send primary selection to clipboard ==================
;;====================== so copy-paste works with other X-applications=========
;;(global-set-key "\C-w" 'clipboard-kill-region)
;;(global-set-key "\M-w" 'clipboard-kill-ring-save)
;;(global-set-key "\C-y" 'clipboard-yank)
;;(delete-selection-mode 1)

;;============backup and auto save==============
;;disable backup
(setq backup-inhibited t)
;;disable auto save
(setq auto-save-default nil)

;;-------speed bar-----------
;;(global-set-key "\C-\M-d" 'speedbar)
(global-set-key [(f5)] 'speedbar)
(global-font-lock-mode t)
;;;;speed bar show all files

(global-font-lock-mode t)
;;;;speed bar show all files
(custom-set-variables
 '(speedbar-show-unknown-files t)
)
;;-------replace-string-------
(define-key global-map "\C-r" 'replace-string)
;;-------goto line------
(define-key global-map "\C-x\C-g" 'goto-line)

;;========================  c++/c  ===================
;;;; CC-mode config  http://cc-mode.sourceforge.net/
(require 'cc-mode)
(c-set-offset 'inline-open 0)
(c-set-offset 'friend '-)
(c-set-offset 'substatement-open 0)

;;-------c mode----------
(defun my-c-mode-common-hook()
 (setq tab-width 4 indent-tabs-mode nil)
 ;;; hungry-delete and auto-newline
 (c-toggle-auto-hungry-state 1)
 ;;define key
 (define-key c-mode-base-map [(control \`)] 'hs-toggle-hiding)
 (define-key c-mode-base-map [(return)] 'newline-and-indent)
 (define-key c-mode-base-map [(f7)] 'compile)
 (define-key c-mode-base-map [(meta \`)] 'c-indent-command)
 ;;(define-key c-mode-base-map [(tab)] 'hippie-expand)
 (define-key c-mode-base-map [(tab)] 'my-indent-or-complete)
 (define-key c-mode-base-map [(meta ?/)] 'semantic-ia-complete-symbol-menu)
 ;;preprocess
 (setq c-macro-shrink-window-flag t)
 (setq c-macro-preprocessor "cpp")
 (setq c-macro-cppflags " ")
 (setq c-macro-prompt-flag t)
 (setq hs-minor-mode t)
 (setq abbrev-mode t)
)
(add-hook 'c-mode-common-hook 'my-c-mode-common-hook)

;;------c++ mode-------
(defun my-c++-mode-hook()
 (setq tab-width 4 indent-tabs-mode nil)
 (c-set-style "stroustrup")
)

;;(setq compile-command "g++ -g -o")   

;;(load-file "/home/fyu/soft/backup/emacs/smart-compile+.el")
;;(add-to-list 'load-path "/home/fyu/soft/backup/emacs/")
;;(require 'smart-compile+)

;(load-file "~/lib/emacs-lisp/cedet-1.0pre3/common/cedet.el")

;;(load-file "/usr/share/emacs/site-lisp/cedet-common/cedet.el")
;;配置Semantic的检索范围:

(setq semanticdb-project-roots
     (list
       (expand-file-name "/")))


(defun my-indent-or-complete ()
  (interactive)
  (if (looking-at "\\>")
      (hippie-expand nil)
      (indent-for-tab-command))
 )

(global-set-key [(control tab)] 'my-indent-or-complete)

;;hippie的自动补齐策略，优先调用了senator的分析结果：

(autoload 'senator-try-expand-semantic "senator")

(setq hippie-expand-try-functions-list
      '(
       senator-try-expand-semantic
       try-expand-dabbrev
       try-expand-dabbrev-visible
       try-expand-dabbrev-all-buffers
       try-expand-dabbrev-from-kill
       try-expand-list
       try-expand-list-all-buffers
       try-expand-line
       try-expand-line-all-buffers
       try-complete-file-name-partially
       try-complete-file-name
       try-expand-whole-kill
       )
)

(define-key c-mode-base-map [(tab)] 'my-indent-or-complete)
(define-key c-mode-base-map [(meta ?/)] 'semantic-ia-complete-symbol-menu)


;;-------emacs-w3m------------------------------------------
(setq w3m-use-toolbar t)
(setq w3m-use-cookies t)
(setq w3m-display-inline-image t)
(setq w3m-tab-width 8)
(setq w3m-view-this-url-new-session-in-background t)
(setq w3m-home-page "http://www.google.com")


;;---default mode----
(setq-default major-mode 'text-mode)

;;;;-------------auto spell check----------------
(setq flyspell-issue-welcome-flag nil)
(autoload 'flyspell-mode "flyspell" "On-the-fly spelling checker." t)
(add-hook 'message-mode-hook 'turn-on-flyspell)
(add-hook 'text-mode-hook 'turn-on-flyspell)
(add-hook 'markdown-mode-hook 'turn-on-flyspell)
(add-hook 'tcl-mode-hook 'flyspell-prog-mode)
(require 'tex-mode)
(autoload 'tex-mode-flyspell-verify "flyspell" "" t)
(add-hook 'mail-mode-hook 'flyspell-mode)
(add-hook 'c-mode-hook 'flyspell-prog-mode)
(add-hook 'c++-mode-hook 'flyspell-prog-mode)
(add-hook 'python-mode-hook 'flyspell-prog-mode)
(defun turn-on-flyspell ()
  "Force flyspell-mode on using a positive arg.  For use in hooks."
  (interactive)
  (flyspell-mode 1))

(global-set-key "\C-t" 'flyspell-mode)








;;=====================ssh========================
(require 'tramp)
(setq tramp-default-method "ssh")
(put 'upcase-region 'disabled nil)


;;====bind comment region key===
 ;; Original idea from
      ;; http://www.opensubscriber.com/message/emacs-devel@gnu.org/10971693.html
      (defun comment-dwim-line (&optional arg)
        "Replacement for the comment-dwim command.
        If no region is selected and current line is not blank and we are not at the end of the line,
        then comment current line.
        Replaces default behaviour of comment-dwim, when it inserts comment at the end of the line."
          (interactive "*P")
          (comment-normalize-vars)
          (if (and (not (region-active-p)) (not (looking-at "[ \t]*$")))
              (comment-or-uncomment-region (line-beginning-position) (line-end-position))
            (comment-dwim arg)))
  ;; bind super - / to comment regions
;;(global-set-key (kbd "s-/") 'comment-dwim-line)
(global-set-key (kbd "s-/") 'comment-region)


;;=====markdown====
(autoload 'markdown-mode "markdown-mode"
   "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.txt\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
(setq markdown-command "pandoc --smart -f markdown -t html")
;(setq markdown-css-path (expand-file-name "markdown.css" abedra/vendor-dir))


;;===scroll==
;; scroll one line at a time (less "jumpy" than defaults)
;; (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
;; (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
(setq scroll-step 1) ;; keyboard scroll one line at a time





;;=====org mode======

;; ;; (require 'org)
;; (define-key global-map "\C-cl" 'org-store-link)
;; (define-key global-map "\C-ca" 'org-agenda)
;; ;;===support shift selection===
;; ;;(setq org-support-shift-select 'always) 
;; (setq org-log-done t)


(put 'set-goal-column 'disabled nil)



